(function() {

	var Handler = require('handler');
	var handlers = new Handler.handler();
	var async = require('async');
	var redis = require('redis-node');
	var Mongo = require('mongodb');


	var Crawler = function() {
		this.config = {
			name : 'Crawler',	// Redis Queue's Name
			len : 100,			// Length Of Task Queue
			tasks_db : 'tasks',
			tasks_coll : 'tasks'
		};
		/* Task Queue */
		this.queue = redis.createClient();
	};

	/**
	 * Clean Redis Task Queue
	 */
	Crawler.prototype.flush = function() {
		var _self = this;
		_self.queue.del(_self.config.name);
	};

	// task = {
	// 		urls : [url],
	// 		handler : 'name of handler'
	// }
	Crawler.prototype.push = function(task, callback) {
		var _self = this;
		// Change Type of task From Object to JSON
		task = JSON.stringify(task);
		_self.queue.rpush(_self.config.name, task);
		if( callback ) callback();
	};

	/**
	 * Call By Client, Get Jobs
	 * @param callback(err, data) Function
	 */
	Crawler.prototype.pull = function(arg, callback) {
		var _self = this;

		/*
		 * Get a Job From Redis Task Queue, And Then Return to Client
		 */
		var pullJob = function(callback) {
			_self.queue.lpop(_self.config.name, function(err, data){
				// Change Type of data From JSON to Object
				if( !data ) {
					console.log('No data in redis');
					callback(err, 'No Jobs');
				} else {
					data = JSON.parse(data);
					callback(err, data);
				}				
			});
		};

		/*
		 * Get Jobs From Mongo Database to Redis Task Queue
		 */
		var pushJob2Redis = function(callback) {
			var client = Mongo.Db(_self.config.tasks_db, new Mongo.Server(GLOBAL_CONF.mongo.host, GLOBAL_CONF.mongo.port), {fsync:true});

			var prevCallback = function(err, data) {
				client.close();
				if(err) callback(err);
				else callback(null, data);
			};

			client.open(function(err) {
				if(err) prevCallback(err);
				else {
					client.collection(_self.config.tasks_coll, function(err, coll) {
						if(err) prevCallback(err);
						else {
							// arr = [
							// 	{
							// 		_id : 'Id of Data',
							// 		tasks : [
							// 			{
							// 				handler : 'name of handler',
							// 				urls : [url]
							// 			}
							// 		]
							// 	}
							// ]
							coll.find().limit(50).toArray(function(err, arr){
								if(err) prevCallback(err);
								else {
									if(arr.length > 0) {
										arr.forEach(function(job) {
											async.every(job.tasks, function(item, done) {
												_self.push(item);
												done();
											}, function(tasks) {
												coll.remove({'_id': job._id}, function(err, res) {
													if(err) prevCallback(err);
													else prevCallback(null, job);
												});
											});
										});
									} 
									else {
										// No Data in Mongo Database
										console.log('No Data in Mongo Database');
										prevCallback();
									}
								}
							});
						}
					});
				}
			});
		};

		/*
		 * Judge Length of Task Queue.
		 * Call pullJob() When Length is Larger Then config.len,
		 * Call pushJob2Redis() Otherwise <- Call pullJob() When Errors Arise. 
		 */
		_self.queue.llen(_self.config.name, function(err, data){
			if(err) {
				callback(err);
			} else if(data > _self.config.len) {
				pullJob(callback);
			} else {
				pushJob2Redis(function(err, data){
					if(err) callback(err);
					else pullJob(callback);
				});
			}
		});
	};

	// tasks = [{
	// 	handler : 'name of handler (tmall | jingdong)',
	// 	results : [
	// 		{
	// 			'specific param of task' : 'value',
	// 			'specific param of task' : 'value'
	// 		}
	// 	]
	// }]
	Crawler.prototype.ack = function(tasks, callback) {
		var _self = this;
		/* Iterate All Tasks */
		async.every(tasks, function(task, done){
			var specHandler = task.handler;
			/* Iterate All Results */
			async.every(task.results, function(result, dealt){
				try {
					handlers[specHandler](result, function(err, newTasks, fin){
						// Call By Client or Which Calls ack()
						if( {}.toString.call(newTasks) === '[object Array]' ) {
							newTasks.forEach(function(job){
								if(job.urls.length != 0) {
									job.handler = specHandler;
									_self.push(job);
									console.log('[ACK] accept a job');
								}
							});
						}
						if( fin ) fin();
					}, function(){ dealt(true); });
				} catch(err) {
					// There is something wrong here, about Err
					console.log(err);
					dealt(true);
				}
			}, function(truthValue){ done(true); }); // End of Iterating All Results

		}, function(truthValue){ callback(null, 'ack'); }); // End of Iterating All Tasks
	};

	exports.Crawler = Crawler;

}());