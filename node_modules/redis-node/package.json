{
  "name": "redis-node",
  "description": "A Complete Redis Client for Node.js",
  "version": "0.4.0",
  "keywords": [
    "redis",
    "node",
    "client",
    "redis-client",
    "redis-node"
  ],
  "author": {
    "name": "Brian Noguchi",
    "email": "brian.noguchi@gmail.com"
  },
  "contributors": [
    {
      "name": "Brian Noguchi",
      "url": "http://ngchi.wordpress.com"
    },
    {
      "name": "Tim Smart",
      "url": "http://github.com/Tim-Smart"
    },
    {
      "name": "Graeme Worthy",
      "url": "http://github.com/graemeworthy"
    }
  ],
  "licenses": [
    "MIT"
  ],
  "repository": {
    "type": "git",
    "url": "http://github.com/bnoguchi/redis-node.git"
  },
  "bugs": {
    "url": "http://github.com/bnoguchi/redis-node/issues"
  },
  "directories": {
    "lib": "./lib",
    "test": "./test"
  },
  "os": [
    "linux",
    "darwin"
  ],
  "dependencies": {},
  "engines": {
    "node": ">=0.4.0"
  },
  "main": "./index.js",
  "readme": "## redis-node - Complete Redis Client for Node.js\n---\n\nBlog post coming.\n\n### Features include:\n- FAST!!!! (See [benchmarks](http://github.com/bnoguchi/redis-node/benchmarks/bench.js))\n- A comprehensive test suite.\n- Fully asynchronous.\n- Support for all Redis commands.\n- PUBLISH and SUBSCRIBE support.\n- Full transactional support (including nested transactions) (i.e., MULTI/EXEC/DISCARD) (to my knowledge, not present in [redis-node-client](http://github.com/fictorial/redis-node-client)).\n- Idiomatic command syntax.\n- Automatic re-establishment of connections to the Redis server.\n\n### Installation\n    npm install redis-node\n\n### A Quick Tour\n    // See ./examples/tour.js\n    var sys = require(\"sys\");\n    var redis = require(\"redis-node\");\n    var client = redis.createClient();    // Create the client\n    client.select(2);                     // Select database 2\n\n    // Assign the string \"world\" to the \"hello\" key.\n    // You can provide a callback to handle the response from Redis\n    // that gets asynchronously run upon seeing the response.\n    client.set(\"hello\", \"world\", function (err, status) {\n      if (err) throw err;\n      console.log(status); // true\n    });\n\n    // ... but you don't have to provide a callback.\n    client.set(\"hello\", \"world\");\n\n    // We may or may not be connected yet, but that's ok, since\n    // the client queues up any commands.\n\n    // The commands are also idiomatic\n    client.hmset(\"hash\", { t: \"rex\", steg: \"asaurus\" }, function (err, status) {\n      if (err) throw err;\n      sys.log(status); // true\n    });\n\n    // Support for transactions\n    console.log(\"Transfer from checking to savings.\");\n    client.transaction( function () {\n      client.decrby(\"checking\", 100, function (err, balance) {\n        if (err) throw err;\n        console.log(\"Checking Balance: \" + balance);\n      });\n      client.incrby(\"savings\", 100, function (err, balance) {\n        if (err) throw err;\n        console.log(\"Savings Balance: \" + balance);\n      });\n    });\n\n    // With automatic transaction discard if there are any syntactic errors\n    client.transaction( function () {\n      client.set(\"I'm missing a 2nd argument\"); // Our client with automatically discard the transaction\n    });\n\n    // Close the connection\n    setTimeout( function () {\n        client.close();\n    }, 1000);\n\nSee test/ for examples of each command.\n\n# API Reference\n## redis.createClient(port, host, options)\nCreates a new Client instance connected to the Redis server running on host:port.\n`host` defaults to `127.0.0.1`\n`port` defaults to `6379`\nYou can pass in an options hash, too.  They default to:\n- `maxReconnectionAttempts` (10) The number of times to try reconnecting to the Redis server before giving up.\n- `reconnectionDelay` (500) How many milliseconds to wait before the 1st reconnection attempt. Using the strategy of exponential backoff, the delay doubles with every re-connection attempt.\n\n## Events\nThe redis-node client emits important events related to the connection with the Redis\nserver. You can bind an event handler to any of the following events:\n  \n- `connected`\n\n  Emitted when the client successfully makes a connection FOR THE FIRST TIME. \n  You usually will not need to bind an event handler to `connected` because the \n  client takes care of queueing up any commands you send it and flushes them \n  to the Redis server once it is connected.\n\n- `disconnected`\n\n  Emitted when we drop a connection with the Redis server. This can happen if the\n  connection times out due to no recent activity from the client.\n\n- `reconnecting`\n\n  Emitted just before the client attempts to reconnect to the Redis server.\n\n- `reconnected`\n\n  Emitted when the client successfully makes a successful reconnection.\n\n- `noconnection`\n\n  Emitted when the client gives up its connection attempts.\n\n- `connection error`\n\n  Emitted when the there is an error that is a result of the connection with the\n  Redis server. The error object is passed to `callback`. If you do not register\n  a listener with this event, then the error is thrown and the program exits.\n\n## Commands operating on all value types\n\n### client.exists(key, callback)\nTest if a key exists.\nPasses `true` to callback if it exists.\nPasses `false` to callback if it does not.\n    client.exists(\"some-key\", function (err, doesExist) {\n        console.log(doesExist);\n    });\n\n### client.del(key1, key2, ..., keyn, callback)\nDelete a key.\nPasses the number of keys that were deleted to `callback`.\n    client.del(\"key1\", \"key2\", function (err, numRemoved) {\n        console.log(numRemoved); // 2\n    });\n\n### client.type(key, callback)\nPasses the type of value stored at key to `callback`. One of:\n- `none` if the key does not exist\n- `string` if the key contains a `String` value\n- `list` if the key contains a `List` value\n- `set` if the key contains a `Set` value\n- `zset` if the key contains a `Sorted Set` value\n- `hash` if the key contains a `Hash` value\n    client.type(\"key-with-string\", function (err, type) {\n        console.log(type); // Either: 'none', 'string', 'list', 'set', 'zset', or 'hash'\n    });\n\n### client.keys(pattern, callback)\nPasses all the keys matching a given pattern to `callback`.\n    // The * pattern returns an array of all keys\n    client.keys(\"*\", function (err, arrayOfKeys) {\n        arrayOfKeys.forEach( function (key) {\n            console.log(key);\n        });\n    });\n\n    // .* patterns\n    client.keys(\"key*\", function (err, arrayOfKeys) {\n        arrayOfKeys.forEach( function (key) {\n            console.log(key);\n        });\n    });\n\n    // ? patterns\n    client.keys(\"?ar\", function (err, arrayOfKeys) {\n        arrayOfKeys.forEach( function (key) {\n            console.log(key); // e.g., 'car', 'bar', 'far'\n        });\n    });\n\n### client.randomkey(callback)\nPasses a random key from the key space to `callback`.\n    client.randomkey( function (err, key) {\n        console.log(key);\n    });\n\n### client.rename(oldName, newName, callback)\nRenames the old key name `oldName` to the new key name `newName`\nPasses `true` to `callback`.\n    client.rename(\"old\", \"new\", function (err, didSucceed) {\n        console.log(didSucceed); // true\n    });\n\n### client.renamenx(oldName, newName, callback)\nRenames the old key name `oldName` to the new key name `newName`,\nif the `newName` key does not already exist.\nPasses `1` if `newName` key did not already exist, to `callback`.\nPasses `0` if `newName` key did already exist, to `callback`.\n    client.renamenx(\"old\", \"new\", function (err, didSucceed) {\n        console.log(!!didSucceed); // true\n    });\n\n### client.dbsize(callback)\nPasses the number of keys in the current db.\n    client.dbsize( function (err, numKeys) {\n        console.log(numKeys);\n    });\n\n### client.expire(key, ttl, callback)\nTells Redis to delete the `key` after `ttl` seconds.\nIf we are using Redis < 2.1.3 and if a `ttl` was already set with \nanother prior `client.expire` invocation, then the new `ttl` does \nNOT override the old `ttl`.\nIf we are using Redis >= 2.1.3 and if a `ttl` was already set with \nanother prior `client.expire` invocation, then the new `ttl` DOES\noverride the old `ttl`.\nThe expiry can be removed from the key if the key is set to a new value using\nthe `client.set(key, value)` command or when a key is destroyed via the \n`client.del(key)` command.\nPasses `1` to `callback` if `key` has no current `ttl` expiry.\nPasses `0` to `callback` if `key` does not exist or if we\nare using Redis < 2.1.3, and `key` already has a current `ttl` expiry.\n    client.expire(\"key\", 2, function (err, didSetExpiry) {\n        console.log(!!didSetExpiry);\n    });\n\n### client.expireat(key, unixtime, callback)\nTells Redis to delete the `key` at the `unixtime` datetime in the future.\nWorks similarly to `client.expire(key, ttl, callback)`\n    client.expireat(\"key\", parseInt((+new Date) / 1000, 10) + 2, function (err, didSetExpiry) {\n        console.log(didSetExpiry);\n    });\n\n### client.ttl(key, callback)\nGets the time to live (i.e., how many seconds before `key` expires) in seconds\nof `key`.\nPasses the number of seconds before `key` expires to `callback`.\nPasses `-1` to `callback` if `key` has no ttl expiry.\n    client.ttl(\"key\", function (err, ttl) {\n        console.log(ttl);\n    });\n\n### client.select(dbIndex, callback)\nSelects the DB with the specified `dbIndex`.\nPasses `true` to `callback`.\n    client.select(2, function (err, didSucceed) {\n        console.log(didSucceed); // true\n    });\n\n### client.move(key, dbIndex, callback)\nMoves `key` from the currently selected DB to the `dbIndex` DB.\nYou can use `client.move` as a locking primitive.\nPasses `1` to `callback` if `key` was moved successfully.\nPasses `0` if the target `key` was already there or if the source `key`\nwas not found at all.\n    client.move(\"key\", 3, function (err, didSucceed) {\n        console.log(!!didSucceed);\n    });\n\n### client.flushdb(callback)\nDeletes all the keys of the currently selected DB. The command never fails.\nPasses `true` to `callback`.\n    client.flushdb( function (err, didSucceed) {\n        console.log(didSucceed); // true\n    });\n\n### client.flushall(callback)\nDeletes all the keys of all the existing databases, not just the currently\nselected one. This command never fails.\nPasses `true` to `callback`.\n    client.flushall( function (didSucceed) {\n        console.log(didSucceed); // true\n    });\n\n## Commands operating on all value types\n\n### client.set(key, value, callback)\nSets `key` to `value`. `value` can be a String, Number, or Buffer.\nPasses `true` to `callback`.\n    client.set(\"key\", \"value\", function (err, didSet) {\n        console.log(didSet); // true\n    });\n\n### client.get(key, callback)\nPasses the Buffer value at `key` to callback if the key exists.\nPasses null to `callback` if `key` does not exist.\n\n## MULTI/EXEC (aka transactions)\n\n### client.transaction(transactionBlock)\nSends commands inside the function `transactionBlock` as a transaction. Behind the scenes, we precede the commands inside `transactionBlock` with a MULTI command and commit the commands with an EXEC command. If there is a syntax error with any of the commands sent in the transaction, EXEC will never be called; instead a DISCARD command will be sent to the Redis server to roll back the transaction.\n    client.transaction( function () {\n        client.rpush(\"txn\", 1);\n        client.rpush(\"txn\", 2);\n        client.rpush(\"txn\", 3, function (err, count) {\n          console.log(count); // 3\n        });\n    });\n\n# Test Coverage\nSee [./test/](https://github.com/bnoguchi/redis-node) for the list of tests.\nCurrently, the tests are implemented via the [Vows](https://github.com/cloudhead/vows).\nHowever, the tests will only work with my fork of vows, so install my branch to see the tests pass:\n    git clone git://github.com/bnoguchi/vows.git\n    git checkout teardownFix\n    npm install\nThen, to run the tests from the command line.\n    make test\nYou can also run the tests directly with the vows binary from the command line.\n    vows test/*.vows.js\n\n# Coming Sooner or Later\n- A distributed API for interacting with a Redis cluster.\n- UDP Support\n\n# Contributors\n- [Brian Noguchi](http://github.com/bnoguchi)\n- [Tim Smart](http://github.com/Tim-Smart)\n- [Graeme Worthy](http://github.com/graemeworthy)\n\n# Other Redis Clients for Node.js\n- [redis-node-client](http://github.com/fictorial/redis-node-client)\n- [node_redis](http://github.com/mranney/node_redis)\n\n### 3rd Party Libraries\n- [Vows Testing Framework](http://github.com/cloudhead/vows)\n\n### License\nMIT License\n\n---\n### Author\nBrian Noguchi\n",
  "readmeFilename": "README.md",
  "_id": "redis-node@0.4.0",
  "dist": {
    "shasum": "83236aa9b1a4e95a6c8bc8d26d517f6d1360d25c"
  },
  "_from": "redis-node@0.4.0",
  "_resolved": "https://registry.npmjs.org/redis-node/-/redis-node-0.4.0.tgz"
}
