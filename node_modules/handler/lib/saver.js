(function() {

	var mongo = require('mongodb');
	var Dispatcher = require('./dispatcher').Dispatcher;

	/**
	 * Saver Object That Appect data And Save It Into Mongo Database.
	 * 
	 * This Object is Between Logic and Persistence Layer.
	 * Each Handler Has Its Saver.
	 */
	var Saver = function(config) {
		var _self = this;

		_self.conf = {
			// Flush Task Queue Automatically If True, False Otherwise.
			auto_flush	: true,
			// Flush Task Queue Once Its Length is More Than flush_limit In auto_flush.
			flush_limit	: 2,
			// Flush Task Queue Once the Timer is Match flush_delay In auto_flush.			
			flush_delay	: 3000
		};

		/* Config of Mongo Database */
		if( typeof config !== 'undefined' ) {
			_self.conf.db = config.db || 'test';
			_self.conf.coll = config.coll || 'baidu';
		} else {
			_self.conf.db = 'test';
			_self.conf.coll = 'baidu';
		}

		// Task Queue, Items Waiting for Save to Mongo.
		_self.queue = [];

		/*
		 * Saving Items of Task Queue to Mongo
		 * @param data Array
		 */
		_self.save = function(data) {
			var client = mongo.Db(_self.conf.db, new mongo.Server(GLOBAL_CONF.mongo.host, GLOBAL_CONF.mongo.port), {fsync:true});
			client.open(function() {
				client.collection(_self.conf.coll, function(err, collection){
					collection.insert(data, function(err) {
						console.log(err);
						// ### How to Save, Every and Queue ###
						console.log('[DB: ' + _self.conf.db + '] insert, finish. ');
						client.close();
					});
				});
			});
		};		

		/*
		 * Push Item into Task Queue, And Then Flush If auto_flush.
		 * @param item Object
		 */
		_self.push = function(item) {
			_self.queue.push(item);
			if( !_self.conf.auto_flush ) return;
			if( _self.queue.length >= _self.conf.flush_limit ) {
				_self.flush();
				return;
			}
			if( !_self.timer ) _self.timer = setTimeout(_self.flush.bind(this), _self.conf.flush_delay);
		};

		/*
		 * Flush Task Queue
		 */
		_self.flush = function() {
			var to_flush = _self.queue;
			_self.queue = [];
			_self.close();
			_self.save( to_flush );
		};	

		/*
		 * Remove Task Queue and Timer
		 */
		_self.close = function() {
			if( _self.timer ) {
				clearTimeout(_self.timer);
				delete _self.timer;
			}
			if( _self.queue.length > 0 ) _self.save(_self.queue);
		};

		/* Return an Object With Methods That Other Modules Can Call */
		return {
			push : _self.push,
			flush : _self.flush
		};
	};

	/**
	 * Generate Savers According to Dispatcher
	 *
	 * (Dispatcher is Middleware Between Handler And Saver)
	 */
	var dispatchers = {};

	/*
	 * Generate Savers According to Dispatcher, Call Automatically.
	 * @param dis Array, Instance of Dispatcher
	 */
	var createSaver = function(dis) {
		dis.item.forEach(function(item){
			dispatchers[item.name] = new Saver({ db:item.db, coll:item.coll });
		});
	};
	
	/*
	 * Return Savers
	 */
	var getSavers = function() {
		createSaver( Dispatcher );
		return dispatchers;
	};

	/* exports */
	exports.Saver = Saver;
	exports.getSavers = getSavers;

}());